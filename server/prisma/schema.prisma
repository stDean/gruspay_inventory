// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Payment_Plan {
  FREE
  BASIC
  STANDARD
  PREMIUM
}

enum Role {
  EMPLOYEE
  ADMIN
}

enum SaleStatus {
  SOLD
  SWAP
  NOT_SOLD
}

model Company {
  id            String       @id @default(uuid())
  company_name  String       @unique
  company_email String       @unique
  password      String
  country       String
  payment_plan  Payment_Plan @default(FREE)
  Users         Users[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  verified      Boolean      @default(false)
  Products      Products[]
  suppliers     Supplier[]
  customers     Buyer[]
}

model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  verified  Boolean  @default(false)
}

model Users {
  id             String     @id @default(uuid())
  first_name     String?
  last_name      String?
  email          String     @unique
  password       String
  role           Role       @default(EMPLOYEE)
  Company        Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String?
  Added_Products Products[] @relation("product_added_by")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Sold_Products  Products[] @relation("product_sold_by")
}

model Products {
  id           String     @id @default(uuid())
  product_name String
  brand        String
  description  String
  type         String
  price        String
  serial_no    String     @unique
  sales_status SaleStatus @default(NOT_SOLD)
  Company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  AddedByUser  Users?     @relation("product_added_by", fields: [added_by], references: [id])
  added_by     String
  SoldByUser   Users?     @relation("product_sold_by", fields: [sold_by], references: [id])
  sold_by      String?
  Supplier     Supplier   @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId   String
  Customer     Buyer?     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  date_sold    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  buyerId      String?
  bought_for   String?
}

model Supplier {
  id                String     @id @default(uuid())
  supplier_name     String
  supplier_email    String?
  supplier_phone_no String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Company           Company?   @relation(fields: [companyId], references: [id])
  companyId         String?
  Products          Products[]

  @@unique([supplier_email, supplier_name])
}

model Buyer {
  id             String     @id @default(uuid())
  buyer_name     String
  buyer_email    String?
  buyer_phone_no String
  Company        Company?   @relation(fields: [companyId], references: [id])
  companyId      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Products       Products[]

  @@unique([buyer_email, buyer_name])
}
